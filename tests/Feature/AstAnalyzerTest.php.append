
// Test property type analysis
it('can analyze property types from class declarations', function () {
    // Rule: Keep the code clean and readable
    $analyzer = app(AstAnalyzer::class);
    $filePath = __DIR__ . '/../Stubs/Models/PropertyTypeTestModel.php';
    $className = 'PropertyTypeTestModel';
    
    $properties = $analyzer->analyzePropertyTypes($filePath, $className);
    
    expect($properties)->toBeArray()
        ->toHaveKey('id')
        ->toHaveKey('name')
        ->toHaveKey('email')
        ->toHaveKey('createdAt')
        ->toHaveKey('status');
        
    // Test property type detection
    expect($properties['id']['type'])->toBe('int');
    expect($properties['name']['type'])->toBe('string');
    expect($properties['email']['type'])->toBe('string');
    
    // Test format inference
    expect($properties['id']['format'])->toBe('int64'); // Inferred from name
    expect($properties['email']['format'])->toBe('email'); // Inferred from name
    expect($properties['createdAt']['format'])->toBe('date-time'); // Inferred from name
    expect($properties['url']['format'])->toBe('uri'); // Inferred from name
    
    // Test required detection
    expect($properties['id']['required'])->toBeTrue();
    
    // Test enum detection
    expect($properties['status']['enum'])->toBeArray()
        ->toContain('active')
        ->toContain('inactive')
        ->toContain('pending');
    
    // Test description extraction
    expect($properties['id']['description'])->toContain("The model's ID");
});

// Test type extraction from docblocks
it('can extract types from PHPDoc comments', function () {
    // Rule: Keep the code modular and easy to understand
    $analyzer = app(AstAnalyzer::class);
    
    // Create a temporary test file with PHPDoc type hints
    $tempFile = sys_get_temp_dir() . '/test_phpdoc_types.php';
    file_put_contents($tempFile, '<?php
    class TestModel {
        /**
         * @var \\DateTime
         */
        private $date;
        
        /**
         * @var array<string>
         */
        private $tags;
    }');
    
    $properties = $analyzer->analyzePropertyTypes($tempFile, 'TestModel');
    
    expect($properties)->toBeArray()
        ->toHaveKey('date')
        ->toHaveKey('tags');
        
    expect($properties['date']['type'])->toBe('\\DateTime');
    
    // Clean up
    @unlink($tempFile);
});

// Test format inference from property names
it('can infer formats from property names', function () {
    // Rule: Stick to PHP best practices
    $analyzer = app(AstAnalyzer::class);
    
    $propertyTypes = [
        ['type' => 'string', 'name' => 'email', 'expected' => 'email'],
        ['type' => 'string', 'name' => 'password', 'expected' => 'password'],
        ['type' => 'string', 'name' => 'createdDate', 'expected' => 'date-time'],
        ['type' => 'string', 'name' => 'updatedTime', 'expected' => 'date-time'],
        ['type' => 'string', 'name' => 'profileUrl', 'expected' => 'uri'],
        ['type' => 'string', 'name' => 'imageUri', 'expected' => 'uri'],
        ['type' => 'int', 'name' => 'userId', 'expected' => 'int64'],
        ['type' => 'int', 'name' => 'count', 'expected' => 'int32'],
        ['type' => 'float', 'name' => 'price', 'expected' => 'float'],
    ];
    
    foreach ($propertyTypes as $test) {
        $method = new \ReflectionMethod($analyzer, 'inferFormatFromType');
        $method->setAccessible(true);
        $format = $method->invoke($analyzer, $test['type'], $test['name']);
        
        expect($format)->toBe($test['expected'], "Failed to infer {$test['expected']} format for {$test['name']}");
    }
});
